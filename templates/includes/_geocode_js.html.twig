{# templates/animal/_geocode_js.html.twig #}
<script>
    (function() {
        // Utilitaire debounce
        function debounce(fn, delay = 600) {
            let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };
        }

        // S√©lecteurs √† adapter si ton form a des prefixes diff√©rents
        const adr = document.querySelector('[name$="[addressLine1]"]');
        const adr2 = document.querySelector('[name$="[addressLine2]"]');
        const cp  = document.querySelector('[name$="[postalCode]"]');
        const city = document.querySelector('[name$="[city]"]');
        const country = document.querySelector('[name$="[country]"]');
        const lat = document.querySelector('[name$="[geoLat]"]');
        const lng = document.querySelector('[name$="[geoLng]"]');

        // Utiliser un √©l√©ment status existant si pr√©sent
        const statusExisting = document.getElementById('geocodeStatus');
        const statusEl = statusExisting || document.createElement('small');
        if (!statusExisting) {
          statusEl.className = 'text-muted d-block mt-1';
          (adr?.parentElement || document.body).appendChild(statusEl);
        }

        async function geocodeNow() {
            if (!adr) return;

            const parts = [];
            if (adr && adr.value) parts.push(adr.value);
            if (adr2 && adr2.value) parts.push(adr2.value);
            if (cp && cp.value) parts.push(cp.value);
            if (city && city.value) parts.push(city.value);
            if (country && country.value) parts.push(country.value);
            // Si on n'a qu'une adresse seule, ajouter un contexte pays par d√©faut
            if (parts.length === 1 && !country) parts.push('France');
            const q = parts.join(', ').trim();

            if (q.length < 6) return; // √©vite les requ√™tes trop t√¥t

            statusEl.textContent = 'üîé G√©ocodage...';
            try {
                const url = new URL('https://nominatim.openstreetmap.org/search');
                url.searchParams.set('q', q);
                url.searchParams.set('format', 'json');
                url.searchParams.set('limit', '1');
                // Respect Nominatim: un User-Agent explicite c√¥t√© serveur; c√¥t√© client on reste l√©ger

                const res = await fetch(url.toString(), {
                    headers: { 'Accept': 'application/json' }
                });
                if (!res.ok) throw new Error('HTTP ' + res.status);
                const data = await res.json();
                if (data && data[0]) {
                    lat.value = data[0].lat;
                    lng.value = data[0].lon; // Nominatim renvoie "lon"
                    statusEl.textContent = `‚úÖ Position trouv√©e (${Number(lat.value).toFixed(5)}, ${Number(lng.value).toFixed(5)})`;
                } else {
                    statusEl.textContent = '‚ö†Ô∏è Adresse introuvable. V√©rifie CP/ville.';
                    // On ne vide pas forc√©ment les anciens lat/lng
                }
            } catch (e) {
                statusEl.textContent = '‚ö†Ô∏è Erreur g√©ocodage, on r√©essayera √† l‚Äôenvoi.';
                console.error(e);
            }
        }

        const trigger = debounce(geocodeNow, 700);
        [adr, adr2, cp, city, country].forEach(el => el && el.addEventListener('input', trigger));

        // Bonus: tenter un g√©ocodage avant soumission si coords vides
        const form = (adr && adr.form) || document.querySelector('form');
        form?.addEventListener('submit', async (e) => {
            if (!lat?.value || !lng?.value) {
                await geocodeNow();
            }
        });
    })();
</script>